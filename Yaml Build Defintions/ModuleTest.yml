parameters:
  baseRepoId: ""
  baseBuildDefinitionId: ""
  coverageThreshold: 60
  coverageVariance: 5
  workingDirectory: $(System.DefaultWorkingDirectory)
  moduleName: ""
  refBranch: "refs/heads/develop"
  pwsh: true

jobs:
- job: Compile
  pool:
    vmImage: 'vs2017-win2016'

  steps:
    - task: gittools.gitversion.gitversion-task.GitVersion@3
      displayName: Build Version from GitVersion

    - task: PowerShell@2
      displayName: Compile Module
      inputs:
        targetType: "filePath"
        filePath: .build.ps1
        arguments: -Task CreateModuleManifest -ResolveDependency
        pwsh: true
        workingDirectory: ${{ parameters.workingDirectory }}

    - task: PublishPipelineArtifact@0
      displayName: "Publish Module Artifact"
      inputs:
        targetPath: BuildOutput

- job: Test
  displayName: 'Test On'
  dependsOn: Compile
  condition: succeeded('Compile')
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    maxParallel: 2
    matrix:
      Windows:
        PowerShellVersion: Windows
      Core:
        PowerShellVersion: Core


  steps:
    - task: DownloadPipelineArtifact@0
      displayName: "Download Pipeline Artifact"
      inputs:
        targetPath: BuildOutput

    - task: PowerShell@2
      displayName: Execute Pester
      inputs:
        targetType: "filePath"
        filePath: .build.ps1
        arguments: -Task Test -ResolveDependency
        pwsh: ${{ eq(variables['PowerShellVersion'],'Core') }}
        workingDirectory: ${{ parameters.workingDirectory }}

    - task: PublishTestResults@2
      displayName: "Publish Test Results"
      inputs:
        testResultsFormat: NUnit
        testRunTitle: "$(PowerShellVersion) Tests"
      condition: always()

    - task: PublishCodeCoverageResults@1
      displayName: "Publish code coverage"
      inputs:
        summaryFileLocation: "**/Coverage-*.xml"
      condition: always()

- job: Build Checks
  dependsOn:
    - Compile
    - Test
  pool:
    vmImage: 'vs2017-win2016'

  steps:
    - task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@5
      displayName: Check Code Coverage Meets Minimum Requirement
      inputs:
        checkCoverage: true
        coverageFailOption: fixed
        coverageType: lines
        coverageThreshold: ${{ parameters.coverageThreshold }}
        includePartiallySucceeded: false
        baseDefinitionId: ${{ parameters.baseBuildDefinitionId }}
        baseRepoId: ${{ parameters.baseRepoId }}
        baseBranchRef: ${{ parameters.refBranch }}

    - task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@5
      displayName: Check Code Coverage variance isn't too high
      inputs:
        checkCoverage: true
        coverageType: lines
        allowCoverageVariance: true
        coverageVariance: ${{ parameters.coverageVariance }}
        coverageDeltaType: percentage
        includePartiallySucceeded: false
        baseDefinitionId: ${{ parameters.baseBuildDefinitionId }}
        baseRepoId: ${{ parameters.baseRepoId }}
        baseBranchRef: ${{ parameters.refBranch }}
